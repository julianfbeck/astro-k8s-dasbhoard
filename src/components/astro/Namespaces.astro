---
import { getK8sNamespacesWithIngress } from "@/lib/k8s/client";

const namespaceIngressInfos = await getK8sNamespacesWithIngress();
---

<div class="bg-background text-foreground rounded-xl border shadow-lg">
    <div class="px-6 py-4 border-b flex items-center justify-between">
        <h2 class="text-lg font-semibold tracking-tight">Kubernetes Namespaces</h2>
        <span class="text-sm text-muted-foreground">{namespaceIngressInfos.length} namespaces</span>
    </div>
    {namespaceIngressInfos.length === 0 ? (
        <div class="p-6 flex items-center justify-center text-muted-foreground">
            <p>No namespaces or ingress URLs found.</p>
        </div>
    ) : (
        <div class="divide-y divide-border/50" id="namespaces-container">
            {namespaceIngressInfos.map(({ namespace, ingressUrls }) => (
                <div class="p-6 space-y-3 hover:bg-muted/50 transition-colors" data-namespace={namespace.metadata?.name}>
                    <div class="flex items-center justify-between group">
                        <a 
                            href={`/namespace/${namespace.metadata?.name}`} 
                            class="text-primary hover:text-primary/80 font-medium transition-colors"
                        >
                            {namespace.metadata?.name}
                        </a>
                        <div class="flex items-center space-x-4">
                            <span class="text-xs text-muted-foreground">
                                Created {new Date(namespace.metadata?.creationTimestamp || '').toLocaleDateString()}
                            </span>
                            <button 
                                class="heart-button text-muted-foreground hover:text-red-500 transition-colors p-1.5 rounded-full hover:bg-red-500/10" 
                                data-namespace={namespace.metadata?.name}
                            >
                                <svg 
                                    xmlns="http://www.w3.org/2000/svg" 
                                    width="16" 
                                    height="16" 
                                    viewBox="0 0 24 24" 
                                    fill="none" 
                                    stroke="currentColor" 
                                    stroke-width="2" 
                                    stroke-linecap="round" 
                                    stroke-linejoin="round" 
                                    class="heart-icon"
                                >
                                    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                    
                    {/* Labels and Annotations */}
                    {((namespace.metadata?.labels && Object.keys(namespace.metadata.labels).length > 0) ||
                    (namespace.metadata?.annotations && Object.keys(namespace.metadata.annotations).length > 0)) && (
                        <div class="flex flex-wrap gap-1.5">
                            {[
                                ...(Object.entries(namespace.metadata?.labels || {})
                                    .map(([key, value]) => ({ key, value, type: 'Label' }))),
                                ...(Object.entries(namespace.metadata?.annotations || {})
                                    .filter(([key]) => key !== 'kubectl.kubernetes.io/last-applied-configuration')
                                    .map(([key, value]) => ({ key, value, type: 'Annotation' })))
                            ].map(({ key, value, type }) => (
                                <span 
                                    class={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ring-1 ring-inset ${
                                        type === 'Label' 
                                            ? 'bg-secondary/30 text-secondary-foreground ring-secondary/30' 
                                            : 'bg-accent/30 text-accent-foreground ring-accent/30'
                                    }`}
                                    title={`${type}: ${key}`}
                                >
                                    {key}: {value}
                                </span>
                            ))}
                        </div>
                    )}

                    {/* Ingress URLs */}
                    {ingressUrls.length > 0 && (
                        <div class="space-y-2">
                            <h4 class="text-xs font-medium text-muted-foreground">Ingress URLs</h4>
                            <ul class="space-y-1.5">
                                {ingressUrls.map((url) => (
                                    <li class="text-xs">
                                        <a 
                                            href={url.toString()} 
                                            target="_blank" 
                                            rel="noopener noreferrer" 
                                            class="text-primary hover:text-primary/80 hover:underline transition-colors inline-flex items-center"
                                        >
                                            {url.toString()}
                                            <svg 
                                                xmlns="http://www.w3.org/2000/svg" 
                                                width="12" 
                                                height="12" 
                                                viewBox="0 0 24 24" 
                                                fill="none" 
                                                stroke="currentColor" 
                                                stroke-width="2" 
                                                stroke-linecap="round" 
                                                stroke-linejoin="round" 
                                                class="ml-1"
                                            >
                                                <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                                                <polyline points="15 3 21 3 21 9"></polyline>
                                                <line x1="10" y1="14" x2="21" y2="3"></line>
                                            </svg>
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>
            ))}
        </div>
    )}
</div>

<script>
    // Client-side JavaScript for heart functionality with cookie storage and sorting
    document.addEventListener('DOMContentLoaded', () => {
        const cookieName = 'heartedUnicorns';

        function getHeartedUnicorns() {
            const cookie = document.cookie.split('; ').find(row => row.startsWith(cookieName));
            return cookie ? JSON.parse(cookie.split('=')[1]) : [];
        }

        function saveHeartedUnicorns(heartedList) {
            const expirationDate = new Date();
            expirationDate.setFullYear(expirationDate.getFullYear() + 1);
            document.cookie = `${cookieName}=${JSON.stringify(heartedList)}; expires=${expirationDate.toUTCString()}; path=/; SameSite=Strict`;
        }

        function sortNamespaces() {
            const container = document.getElementById('namespaces-container');
            const namespaces = Array.from(container.children);
            const heartedUnicorns = getHeartedUnicorns();
            
            namespaces.sort((a, b) => {
                const aHearted = heartedUnicorns.includes(a.dataset.namespace);
                const bHearted = heartedUnicorns.includes(b.dataset.namespace);
                if (aHearted === bHearted) {
                    return a.dataset.namespace.localeCompare(b.dataset.namespace);
                }
                return aHearted ? -1 : 1;
            });

            namespaces.forEach(namespace => container.appendChild(namespace));
        }

        const heartedUnicorns = getHeartedUnicorns();
        const heartButtons = document.querySelectorAll('.heart-button');
        
        heartButtons.forEach(button => {
            const namespace = button.getAttribute('data-namespace');
            const icon = button.querySelector('.heart-icon');
            if (heartedUnicorns.includes(namespace)) {
                icon.setAttribute('fill', 'currentColor');
            }
        });

        heartButtons.forEach(button => {
            button.addEventListener('click', () => {
                const namespace = button.getAttribute('data-namespace');
                const icon = button.querySelector('.heart-icon');
                const heartedList = getHeartedUnicorns();
                
                if (icon.getAttribute('fill') === 'none') {
                    icon.setAttribute('fill', 'currentColor');
                    heartedList.push(namespace);
                    console.log(`Hearted unicorn: ${namespace}`);
                } else {
                    icon.setAttribute('fill', 'none');
                    const index = heartedList.indexOf(namespace);
                    if (index > -1) {
                        heartedList.splice(index, 1);
                    }
                    console.log(`Unhearted unicorn: ${namespace}`);
                }
                
                saveHeartedUnicorns(heartedList);
                sortNamespaces();
            });
        });

        sortNamespaces();
    });
</script>