---
import {
  getK8sNamespacesWithIngress,
  type NamespaceIngressInfo,
} from "@/lib/k8s/client";
import NamespaceItem from "./NamespaceItem.astro";

interface Props {
  namespaceIngressInfos: NamespaceIngressInfo[];
}
const { namespaceIngressInfos } = Astro.props;
---

<div class="bg-background text-foreground rounded-xl border shadow-lg">
  <div class="px-6 py-4 border-b flex items-center justify-between">
    <h2 class="text-lg font-semibold tracking-tight">Kubernetes Namespaces</h2>
    <span class="text-sm text-muted-foreground"
      >{namespaceIngressInfos.length} namespaces</span
    >
  </div>
  {
    namespaceIngressInfos.length === 0 ? (
      <div class="p-6 flex items-center justify-center text-muted-foreground">
        <p>No namespaces or ingress URLs found.</p>
      </div>
    ) : (
      <div class="divide-y divide-border/50" id="namespaces-container">
        {namespaceIngressInfos.map((namespaceInfo) => (
          <NamespaceItem namespace={namespaceInfo} showHeartByDefault={false} />
        ))}
      </div>
    )
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const cookieName = "heartedUnicorns";

    function getHeartedUnicorns() {
      const cookie = document.cookie
        .split("; ")
        .find((row) => row.startsWith(cookieName));
      return cookie ? JSON.parse(cookie.split("=")[1]) : [];
    }

    function saveHeartedUnicorns(heartedList) {
      const expirationDate = new Date();
      expirationDate.setFullYear(expirationDate.getFullYear() + 1);
      document.cookie = `${cookieName}=${JSON.stringify(heartedList)}; expires=${expirationDate.toUTCString()}; path=/; SameSite=Strict`;
    }

    function sortNamespaces() {
      const container = document.getElementById("namespaces-container");
      const namespaces = Array.from(container.children);
      const heartedUnicorns = getHeartedUnicorns();

      namespaces.sort((a, b) => {
        const aHearted = heartedUnicorns.includes(a.dataset.namespace);
        const bHearted = heartedUnicorns.includes(b.dataset.namespace);
        if (aHearted === bHearted) {
          return a.dataset.namespace.localeCompare(b.dataset.namespace);
        }
        return aHearted ? -1 : 1;
      });

      namespaces.forEach((namespace) => container.appendChild(namespace));
    }

    // Initialize hearts
    const heartedUnicorns = getHeartedUnicorns();
    const heartButtons = document.querySelectorAll(".heart-button");

    heartButtons.forEach((button) => {
      const namespace = button.getAttribute("data-namespace");
      const icon = button.querySelector(".heart-icon");
      if (heartedUnicorns.includes(namespace)) {
        icon.setAttribute("fill", "currentColor");
      }
    });

    // Heart click handlers
    heartButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const namespace = button.getAttribute("data-namespace");
        const icon = button.querySelector(".heart-icon");
        const heartedList = getHeartedUnicorns();

        if (icon.getAttribute("fill") === "none") {
          icon.setAttribute("fill", "currentColor");
          heartedList.push(namespace);
        } else {
          icon.setAttribute("fill", "none");
          const index = heartedList.indexOf(namespace);
          if (index > -1) {
            heartedList.splice(index, 1);
          }
        }

        saveHeartedUnicorns(heartedList);
        sortNamespaces();
      });
    });

    // Labels toggle functionality
    const labelToggles = document.querySelectorAll(".labels-toggle");

    labelToggles.forEach((toggle) => {
      toggle.addEventListener("click", () => {
        const namespaceDiv = toggle.closest("[data-namespace]");
        const container = namespaceDiv.querySelector(".labels-container");
        const arrow = toggle.querySelector("svg");
        const isExpanded = toggle.getAttribute("data-expanded") === "true";

        if (isExpanded) {
          container.classList.add("hidden");
          arrow.style.transform = "rotate(0deg)";
          toggle.setAttribute("data-expanded", "false");
        } else {
          container.classList.remove("hidden");
          arrow.style.transform = "rotate(180deg)";
          toggle.setAttribute("data-expanded", "true");
        }
      });
    });

    // Initial sort
    sortNamespaces();
  });
</script>
