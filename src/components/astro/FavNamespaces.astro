---
import { getK8sNamespacesWithIngress } from "@/lib/k8s/client";

// K8sNamespacesAndIngress.astro

// This uses an optimized function that fetches all ingresses in a single API call
const namespaceIngressInfos = await getK8sNamespacesWithIngress();
---

<div class="bg-background text-foreground rounded-lg border shadow-sm">
    <div class="p-4 border-b">
        <h2 class="text-lg font-semibold">Kubernetes Namespaces and Ingress URLs</h2>
    </div>
    {namespaceIngressInfos.length === 0 ? (
        <p class="p-4 text-muted-foreground">No namespaces or ingress URLs found.</p>
    ) : (
        <div class="divide-y divide-border" id="namespaces-container">
            {namespaceIngressInfos.map(({ namespace, ingressUrls }) => (
                <div class="p-4 space-y-2" data-namespace={namespace.metadata?.name}>
                    <div class="flex items-center justify-between">
                        <h3 class="text-sm font-medium">{namespace.metadata?.name}</h3>
                        <div class="flex items-center space-x-2">
                            <span class="text-xs text-muted-foreground">{new Date(namespace.metadata?.creationTimestamp || '').toLocaleDateString()}</span>
                            <button class="heart-button text-muted-foreground hover:text-red-500 transition-colors" data-namespace={namespace.metadata?.name}>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="heart-icon"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>
                            </button>
                        </div>
                    </div>
                    
                    {/* Labels */}
                    {namespace.metadata?.labels && Object.keys(namespace.metadata.labels).length > 0 && (
                        <div class="flex flex-wrap gap-1 mt-1">
                            {Object.entries(namespace.metadata.labels).map(([key, value]) => (
                                <span class="inline-flex items-center rounded-full bg-secondary px-2 py-1 text-xs font-medium text-secondary-foreground">
                                    {key}: {value}
                                </span>
                            ))}
                        </div>
                    )}
                    {namespace.metadata?.annotations && Object.keys(namespace.metadata.annotations).length > 0 && (
                        <div class="flex flex-wrap gap-1 mt-1">
                            {Object.entries(namespace.metadata.annotations).map(([key, value]) => (
                                <span class="inline-flex items-center rounded-full bg-secondary px-2 py-1 text-xs font-medium text-secondary-foreground">
                                    {key}: {value}
                                </span>
                            ))}
                        </div>
                    )}

                    {/* Ingress URLs */}
                    {ingressUrls.length > 0 && (
                        <div class="space-y-1 mt-2">
                            <h4 class="text-xs font-medium text-muted-foreground">Ingress URLs:</h4>
                            <ul class="space-y-1">
                                {ingressUrls.map((url) => (
                                    <li class="text-xs">
                                        <a href={url.toString()} target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">
                                            {url.toString()}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>
            ))}
        </div>
    )}
</div>

<script>
    // Client-side JavaScript for heart functionality with cookie storage and sorting
    document.addEventListener('DOMContentLoaded', () => {
        const cookieName = 'heartedUnicorns';

        // Function to get hearted unicorns from cookie
        function getHeartedUnicorns() {
            const cookie = document.cookie.split('; ').find(row => row.startsWith(cookieName));
            return cookie ? JSON.parse(cookie.split('=')[1]) : [];
        }

        // Function to save hearted unicorns to cookie
        function saveHeartedUnicorns(heartedList) {
            const expirationDate = new Date();
            expirationDate.setFullYear(expirationDate.getFullYear() + 1); // Cookie expires in 1 year
            document.cookie = `${cookieName}=${JSON.stringify(heartedList)}; expires=${expirationDate.toUTCString()}; path=/; SameSite=Strict`;
        }

        // Function to sort namespaces
        function sortNamespaces() {
            const container = document.getElementById('namespaces-container');
            const namespaces = Array.from(container.children);
            const heartedUnicorns = getHeartedUnicorns();
            
            namespaces.sort((a, b) => {
                const aHearted = heartedUnicorns.includes(a.dataset.namespace);
                const bHearted = heartedUnicorns.includes(b.dataset.namespace);
                if (aHearted === bHearted) {
                    return a.dataset.namespace.localeCompare(b.dataset.namespace);
                }
                return aHearted ? -1 : 1;
            });

            namespaces.forEach(namespace => container.appendChild(namespace));
        }

        // Initialize hearts based on cookie
        const heartedUnicorns = getHeartedUnicorns();
        const heartButtons = document.querySelectorAll('.heart-button');
        heartButtons.forEach(button => {
            const namespace = button.getAttribute('data-namespace');
            const icon = button.querySelector('.heart-icon');
            if (heartedUnicorns.includes(namespace)) {
                icon.setAttribute('fill', 'currentColor');
            }
        });

        // Add click event listeners
        heartButtons.forEach(button => {
            button.addEventListener('click', () => {
                const namespace = button.getAttribute('data-namespace');
                const icon = button.querySelector('.heart-icon');
                const heartedList = getHeartedUnicorns();
                
                if (icon.getAttribute('fill') === 'none') {
                    icon.setAttribute('fill', 'currentColor');
                    heartedList.push(namespace);
                    console.log(`Hearted unicorn: ${namespace}`);
                } else {
                    icon.setAttribute('fill', 'none');
                    const index = heartedList.indexOf(namespace);
                    if (index > -1) {
                        heartedList.splice(index, 1);
                    }
                    console.log(`Unhearted unicorn: ${namespace}`);
                }
                
                saveHeartedUnicorns(heartedList);
                sortNamespaces();
            });
        });

        // Initial sort
        sortNamespaces();
    });
</script>