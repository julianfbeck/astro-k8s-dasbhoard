---
import { DetailCommandBox } from "@/components/custom/DetailCommandBox";
import EnvironmentNav from "@/components/custom/EnvironmentNav";
import { ListCommandBox } from "@/components/custom/ListCommandBox";
import { ModeToggle } from "@/components/custom/ModeToggle";
import { getConfig } from "@/lib/config";
import type { NamespaceInfo, NamespaceIngressInfo } from "@/lib/k8s/client";
import { ArrowLeft, ChevronLeft, Compass } from "lucide-react";

interface Props {
  title: string;
  namespaceIngressInfos: NamespaceIngressInfo[] | undefined;
  namespaceInfo: NamespaceInfo | undefined;
}

const { title, namespaceIngressInfos, namespaceInfo } = Astro.props;

const navItems = [
  { href: "/", label: "Namespaces" },
  { href: "/favs", label: "Favourites" },
];

const currentPath = Astro.url.pathname;
const isNavPath = currentPath === "/" || currentPath === "/favs";
const config = getConfig();
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content=`Compass: ${title}` />
    <meta name="theme-color" content="#000000" />
    <meta name="author" content="Julian Beck" />
    <meta name="robots" content="noindex, nofollow" />
    <meta property="og:title" content={`${title} - Compass`} />
    <meta property="og:description" content=`Compass: ${title}` />
    <meta property="og:type" content="website" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.json" />
    <title>{title}</title>

    <script is:inline>
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };

      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }

      // Add click handler for dashboard title
      document.addEventListener("DOMContentLoaded", () => {
        const dashboardTitle = document.querySelector("#dashboard-title");
        if (dashboardTitle) {
          dashboardTitle.addEventListener("click", () => {
            window.location.href = "/";
          });
        }
      });
    </script>
  </head>
  <body class="bg-background text-foreground">
    <div class="flex h-screen overflow-hidden">
      <!-- Sidebar -->
      <aside
        class="w-60 flex flex-col bg-gradient-to-br from-primary via-primary/95 to-primary/90 text-primary-foreground shadow-xl"
      >
        <!-- Main Navigation Area -->
        <div class="flex-1 p-5">
          <div
            id="dashboard-title"
            class="flex items-center space-x-2 mb-6 cursor-pointer hover:text-primary-foreground/90 transition-colors"
          >
            <Compass className="h-6 w-6" />
            <h1 class="text-xl font-bold tracking-tight">Compass</h1>
          </div>
          <nav class="space-y-1">
            {
              navItems.map((item) => (
                <a
                  href={item.href}
                  class="block py-2.5 px-4 rounded-lg transition-all duration-200 hover:bg-white/10 relative group"
                  data-active={currentPath === item.href}
                >
                  <span class="relative z-10">{item.label}</span>
                  {currentPath === item.href && (
                    <div class="absolute inset-0 bg-white/15 rounded-lg" />
                  )}
                </a>
              ))
            }
          </nav>
        </div>

        <!-- Bottom Area with Environment Links and Theme Toggle -->
        <div class="border-t border-primary-foreground/10">
          <div class="p-5">
            <EnvironmentNav client:load urls={config.SIDEBAR_URLS} />
          </div>
          <div class="p-5 pt-0">
            <ModeToggle client:load />
          </div>
        </div>
      </aside>

      <!-- Main Content Area -->
      <div class="flex-1 flex flex-col min-h-0">
        <!-- Header -->

        <header
          class="h-16 bg-gradient-to-r from-secondary/90 via-secondary to-secondary/90 text-secondary-foreground shadow-md"
        >
          <div class="h-full mx-6 flex items-center justify-between">
            <div class="flex items-center">
              {
                !isNavPath && (
                  <a
                    href="/"
                    class="group flex items-center mr-4 text-secondary-foreground/70 hover:text-secondary-foreground transition-colors"
                    aria-label="Back to dashboard"
                  >
                    <ChevronLeft className="h-5 w-5" />
                  </a>
                )
              }
              <h2 class="text-xl font-semibold tracking-tight">{title}</h2>
            </div>
            <div class="flex items-center space-x-6">
              {
                namespaceIngressInfos && !namespaceInfo && (
                  <ListCommandBox
                    client:load
                    namespaceData={namespaceIngressInfos}
                    appConfig={getConfig()}
                  />
                )
              }
              {
                namespaceIngressInfos && namespaceInfo && (
                  <DetailCommandBox
                    client:load
                    namespaces={namespaceIngressInfos}
                    namespace={namespaceInfo}
                    appConfig={getConfig()}
                  />
                )
              }
            </div>
          </div>
        </header>

        <!-- Main Content -->
        <main
          class="flex-1 overflow-y-auto p-8 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent"
        >
          <div class="max-w-7xl mx-auto">
            <slot />
          </div>
        </main>
      </div>
    </div>
  </body>
</html>
