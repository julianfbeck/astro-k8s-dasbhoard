---
import { DetailCommandBox } from "@/components/custom/DetailCommandBox";
import EnvironmentNav from "@/components/custom/EnvironmentNav";
import { ListCommandBox } from "@/components/custom/ListCommandBox";
import { ModeToggle } from "@/components/custom/ModeToggle";
import type { SideBarUrl } from "@/lib/config";
import type { NamespaceInfo, NamespaceIngressInfo } from "@/lib/k8s/client";
import { GRAFANA_BASE_URL } from "astro:env/server";

interface Props {
  title: string;
  namespaceIngressInfos: NamespaceIngressInfo[] | undefined;
  namespaceInfo: NamespaceInfo | undefined;
}

const { title, namespaceIngressInfos, namespaceInfo } = Astro.props;

const navItems = [
  { href: "/", label: "Namespaces" },
  { href: "/favs", label: "Favourites" },
];

const sidebarUrls = [
  {
    name: "Grafana",
    url: "https://grafana.example.com",
    icon: "chart",
    description: "Metrics and monitoring",
  },
  {
    name: "API Docs",
    url: "https://api.example.com",
    icon: "text",
    description: "API Documentation",
  },
  {
    name: "Terminal",
    url: "https://terminal.example.com",
    icon: "terminal",
    description: "Web Terminal Access",
  },
  {
    name: "Status Page",
    url: "https://status.example.com",
    icon: "url",
    description: "System Status",
  },
] as SideBarUrl[];
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>

    <script is:inline>
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };

      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
  </head>
  <body class="bg-background text-foreground">
    <div class="flex h-screen overflow-hidden">
      <!-- Sidebar -->
      <aside
        class="w-60 flex flex-col bg-gradient-to-br from-primary via-primary/95 to-primary/90 text-primary-foreground shadow-xl"
      >
        <!-- Main Navigation Area -->
        <div class="flex-1 p-5">
          <h1 class="text-xl font-bold tracking-tight mb-6">Dashboard</h1>
          <nav class="space-y-1">
            {
              navItems.map((item) => (
                <a
                  href={item.href}
                  class="block py-2.5 px-4 rounded-lg transition-all duration-200 hover:bg-white/10 relative group"
                  data-active={Astro.url.pathname === item.href}
                >
                  <span class="relative z-10">{item.label}</span>
                  {Astro.url.pathname === item.href && (
                    <div class="absolute inset-0 bg-white/15 rounded-lg" />
                  )}
                </a>
              ))
            }
          </nav>
        </div>

        <!-- Bottom Area with Environment Links and Theme Toggle -->
        <div class="border-t border-primary-foreground/10">
          <div class="p-5">
            <EnvironmentNav client:load urls={sidebarUrls} />
          </div>
          <div class="p-5 pt-0">
            <ModeToggle client:load />
          </div>
        </div>
      </aside>

      <!-- Main Content Area -->
      <div class="flex-1 flex flex-col min-h-0">
        <!-- Header -->
        <header
          class="h-16 bg-gradient-to-r from-secondary/90 via-secondary to-secondary/90 text-secondary-foreground shadow-md"
        >
          <div class="h-full mx-6 flex items-center justify-between">
            <h2 class="text-xl font-semibold tracking-tight">{title}</h2>
            <div class="flex items-center space-x-6">
              {
                namespaceIngressInfos && !namespaceInfo && (
                  <ListCommandBox
                    client:load
                    namespaceData={namespaceIngressInfos}
                  />
                )
              }
              {
                namespaceIngressInfos && namespaceInfo && (
                  <DetailCommandBox
                    client:load
                    namespaces={namespaceIngressInfos}
                    namespace={namespaceInfo}
                    grafana_base_url={GRAFANA_BASE_URL}
                  />
                )
              }
            </div>
          </div>
        </header>

        <!-- Main Content -->
        <main
          class="flex-1 overflow-y-auto p-8 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent"
        >
          <div class="max-w-7xl mx-auto">
            <slot />
          </div>
        </main>
      </div>
    </div>
  </body>
</html>
